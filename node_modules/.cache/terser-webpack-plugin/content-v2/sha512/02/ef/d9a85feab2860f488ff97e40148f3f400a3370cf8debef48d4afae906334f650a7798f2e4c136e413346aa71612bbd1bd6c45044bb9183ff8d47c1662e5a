{"map":"{\"version\":3,\"sources\":[\"/Users/Adilkhan/Desktop/site/src/Request.js\",\"/Users/Adilkhan/Desktop/site/src/serviceWorker.js\",\"/Users/Adilkhan/Desktop/site/src/index.js\"],\"names\":[\"Request\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"fridgeRepairRequests\",\"addrequest\",\"bind\",\"assertThisInitialized\",\"e\",\"inputElement\",\"value\",\"newRequest\",\"text\",\"key\",\"Date\",\"now\",\"setState\",\"prevState\",\"concat\",\"preventDefault\",\"_this2\",\"react_default\",\"a\",\"createElement\",\"className\",\"onSubmit\",\"ref\",\"request\",\"placeholder\",\"type\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"Request_Request\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"gOAGqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,qBAAsB,IAGxBR,EAAKS,WAAaT,EAAKS,WAAWC,KAAhBT,OAAAU,EAAA,EAAAV,CAAAA,OAAAU,EAAA,EAAAV,CAAAD,KAPDA,0EAURY,GACT,GAAgC,KAA5BT,KAAKU,aAAaC,MAAc,CAClC,IAAIC,EAAa,CACfC,KAAMb,KAAKU,aAAaC,MACxBG,IAAKC,KAAKC,OAGZhB,KAAKiB,SAAS,SAAAC,GACZA,EAAUb,qBAAqBc,OAAOP,KAI1CZ,KAAKU,aAAaC,MAAQ,GAE1BF,EAAEW,kDAGK,IAAAC,EAAArB,KACP,OACEsB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAA,CAAME,SAAU1B,KAAKM,YACnBgB,EAAAC,EAAAC,cAAA,WAAA,CACEG,IAAK,SAAAC,GAAO,OAAKP,EAAKX,aAAekB,GACrCC,YAAY,0FAEdP,EAAAC,EAAAC,cAAA,SAAA,CAAQM,KAAK,UAAb,qEArCyBC,EAAAA,YCSjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAaC,SAASC,eAAe,UD2H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport \\\"./Request.css\\\";\\n\\nexport default class Request extends Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      fridgeRepairRequests: []\\n    };\\n\\n    this.addrequest = this.addrequest.bind(this);\\n  }\\n\\n  addrequest(e) {\\n    if (this.inputElement.value !== \\\"\\\") {\\n      var newRequest = {\\n        text: this.inputElement.value,\\n        key: Date.now()\\n      };\\n\\n      this.setState(prevState => {\\n        prevState.fridgeRepairRequests.concat(newRequest);\\n      });\\n    }\\n\\n    this.inputElement.value = \\\"\\\";\\n\\n    e.preventDefault();\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"todoListMain\\\">\\n        <div className=\\\"header\\\">\\n          <form onSubmit={this.addrequest}>\\n            <textarea\\n              ref={request => (this.inputElement = request)}\\n              placeholder=\\\"Оставьте заявку\\\"\\n            />\\n            <button type=\\\"submit\\\">Отправить </button>\\n          </form>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport \\\"./index.css\\\";\\nimport Request from \\\"./Request\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";\\n\\nReactDOM.render(<Request />, document.getElementById(\\\"react\\\"));\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t,n){},16:function(e,t,n){},17:function(e,t,n){\"use strict\";n.r(t);var a=n(0),i=n.n(a),r=n(3),o=n.n(r),c=(n(15),n(4)),u=n(5),s=n(7),l=n(6),d=n(8),m=n(1),h=(n(16),function(e){function t(e){var n;return Object(c.a)(this,t),(n=Object(s.a)(this,Object(l.a)(t).call(this,e))).state={fridgeRepairRequests:[]},n.addrequest=n.addrequest.bind(Object(m.a)(Object(m.a)(n))),n}return Object(d.a)(t,e),Object(u.a)(t,[{key:\"addrequest\",value:function(e){if(\"\"!==this.inputElement.value){var t={text:this.inputElement.value,key:Date.now()};this.setState(function(e){e.fridgeRepairRequests.concat(t)})}this.inputElement.value=\"\",e.preventDefault()}},{key:\"render\",value:function(){var e=this;return i.a.createElement(\"div\",{className:\"todoListMain\"},i.a.createElement(\"div\",{className:\"header\"},i.a.createElement(\"form\",{onSubmit:this.addrequest},i.a.createElement(\"textarea\",{ref:function(t){return e.inputElement=t},placeholder:\"\\u041e\\u0441\\u0442\\u0430\\u0432\\u044c\\u0442\\u0435 \\u0437\\u0430\\u044f\\u0432\\u043a\\u0443\"}),i.a.createElement(\"button\",{type:\"submit\"},\"\\u041e\\u0442\\u043f\\u0440\\u0430\\u0432\\u0438\\u0442\\u044c \"))))}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(i.a.createElement(h,null),document.getElementById(\"react\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},9:function(e,t,n){e.exports=n(17)}},[[9,1,2]]]);","extractedComments":[]}